name: Infrared Code Assistant

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

jobs:
  process-infrared-request:
    if: |
      contains(github.event.issue.body, '@infrared') || 
      contains(github.event.comment.body, '@infrared')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Initialize Response Comment
        uses: actions/github-script@v6
        id: add-processing-comment
        with:
          script: |
            const issueNumber = context.issue.number;
            const repo = context.repo;
            
            let comment = "Infrared dispatched. Coding the solution now...";
            
            if (context.eventName === 'issues') {
              await github.rest.issues.createComment({
                ...repo,
                issue_number: issueNumber,
                body: comment
              });
            } else if (context.eventName === 'issue_comment') {
              await github.rest.issues.createComment({
                ...repo,
                issue_number: issueNumber,
                body: comment
              });
            }

      - name: Process Request with Infrared
        id: infrared-processing
        run: |
          python .github/scripts/process_infrared.py
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          COMMENT_BODY: ${{ github.event.comment.body }}
          PR_NUMBER: ${{ github.event.pull_request.number }}

      - name: Create New Branch
        if: steps.infrared-processing.outputs.status == 'CORRECT'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git checkout -b ${{ github.event.issue.number }}-infrared-changes
          git add .
          git commit -m "feat: Infrared automated changes for #${{ github.event.issue.number }}"
          git push origin ${{ github.event.issue.number }}-infrared-changes

      - name: Create or Update Pull Request
        if: steps.infrared-processing.outputs.status == 'CORRECT'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const issueNumber = context.issue.number;
            
            // Check if PR already exists
            const searchQuery = `repo:${context.repo.owner}/${context.repo.repo} is:pr is:open head:${issueNumber}-infrared-changes`;
            const searchResult = await github.rest.search.issuesAndPullRequests({
              q: searchQuery
            });
            
            const prBody = `Automated changes by Infrared for #${issueNumber}
            
            This PR was automatically generated by the Infrared assistant in response to #${issueNumber}.`;
            
            if (searchResult.data.total_count === 0) {
              // Create new PR
              await github.rest.pulls.create({
                ...context.repo,
                title: `[Infrared] Automated changes for #${issueNumber}`,
                body: prBody,
                head: `${issueNumber}-infrared-changes`,
                base: 'main'
              });
            } else {
              // Update existing PR
              const existingPr = searchResult.data.items[0];
              await github.rest.pulls.update({
                ...context.repo,
                pull_number: existingPr.number,
                body: prBody
              });
            }

      - name: Handle Failed Review
        if: steps.infrared-processing.outputs.status != 'CORRECT'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const analysisFile = '.github/temp/analysis.txt';
            const explanationFile = '.github/temp/explanation.txt';
            const outputFile = '.github/temp/output.txt';
            
            const analysis = fs.readFileSync(analysisFile, 'utf8');
            const explanation = fs.readFileSync(explanationFile, 'utf8');
            const output = fs.readFileSync(outputFile, 'utf8');
            
            const failureComment = `### ‚ùå Infrared Code Review Failed
            
            **Status:** ${output}
            
            **Analysis:**
            ${analysis}
            
            **Explanation:**
            ${explanation}`;
            
            if (context.eventName === 'issues') {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: failureComment
              });
            } else if (context.eventName === 'issue_comment') {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: failureComment
              });
            }